{
  "name": "validations",
  "description": "A validation library for JavaScript objects modeled loosely on ActiveRecord validations.",
  "homepage": "http://danieldkim.github.com/validations-js/",
  "keywords": [
    "validation"
  ],
  "author": {
    "name": "Daniel Kim",
    "email": "danieldkimster@gmail.com"
  },
  "contributors": [],
  "dependencies": {
    "underscore": ">=1.1.7",
    "underscore.string": ">=1.1.6",
    "nodeunit": ">=0.5.5"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:danieldkim/validations-js.git"
  },
  "main": "validations.js",
  "version": "0.1.2",
  "readme": "# validations-js\n\nvalidations-js is a validation library for JavaScript objects modeled loosely on\n[ActiveRecord validations](\nhttp://ar.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html ).\nCurrently supports options to validate requiredness, length, numericality, and\nformat.\n\n## Requirements\n\n* [Underscore.js](http://documentcloud.github.com/underscore/)\n\n* [inflections-js](http://code.google.com/p/inflection-js/) (only when running in browser)\n\n* [Underscore.string](https://github.com/edtsech/underscore.string) (only when running on Node.js)\n\n* JSON.stringify() support\n\n* Node.js and [nodeunit](https://github.com/caolan/nodeunit) (optional, only\n  needed to run tests)\n\n## Usage\n\nYou can install using npm:\n\n    npm install validations\n\nOr download the validations.js file from github.\n\nTo use the validations library in Node.js require validations.js and call the\nvalidations function, passing it the object to be validated and a validation\nconfiguration, like so:\n\n    var validations = require('validations');\n    var errors = validations.validate(my_object, my_validation_config);\n\nIf using in the browser include underscore.js, inflection.js, validations.js\nand, if necessary,\n[json2.js](https://github.com/douglascrockford/JSON-js/blob/master/json2.js) in\nyour page instead of using <code>require()</code>;\n\nThe various configuration options and the api for the errors object that is\nreturned are discussed below.\n\n### Validation configuration\n\nTo specify the rules for the properties of an object, set the *properties*\nproperty of the validation configuration with a hash that contains the\nconfiguration for each property. For example, validating that an object has a\nrequired property can be done like so:\n\n    var errors = validations.validate(my_object, {\n      properties: {\n        my_prop: {\n          required: true\n        }\n      }\n    });\n\nTo validate the length of property use the *length* option:\n\n    var errors = validations.validate(my_object, {\n      properties: {\n        my_prop_a: {\n          length: {\n            is: 1\n          }\n        },\n        my_prop_b: {\n          length: {\n            is: 2\n          }\n        },\n        my_prop_b: {\n          length: {\n            min: 1\n          }\n        }\n      }\n    });\n\nYou can specify multiple options on a single property:\n\n    var errors = validations.validate(my_object, {\n      properties: {\n        my_prop_a: {\n          required: true,\n          length: {\n            min: 1,\n            max: 10\n          }\n        }\n      }\n    });\n\n**Note: if a property is not required and it's blank (undefined or null), any\nother validation options defined for that property will not be applied.**\n\nThese are all the validation options:\n\n* required\n* length\n    * is\n    * min\n    * max\n* numericality\n    * onlyInteger\n    * greaterThan\n    * greaterThanOrEqualTo\n    * equalTo\n    * lessThan\n    * lessThanOrEqualTo\n    * odd\n    * even\n* format\n    * pattern\n\n#### Message configuration\n\nvalidations-js comes packaged with a default set of error messages for each of the validation options:\n\n    {\n      required: \"{{name}} is required.\",\n      length: {\n        is: \"{{name}} must be exactly {{compare_to}} characters.\",\n        min: \"{{name}} must be at least {{compare_to}} characters.\",\n        max: \"{{name}} must not exceed {{compare_to}} characters.\"\n      },\n      numericality: {\n        onlyInteger: \"{{name}} must be an integer.\",\n        greaterThan: \"{{name}} must be greater than {{compare_to}}\",\n        greaterThanOrEqualTo: \"{{name}} must be greater than or equal to {{compare_to}}.\",\n        equalTo: \"{{name}} must be equal to {{compare_to}}.\",\n        lessThan: \"{{name}} must be less than {{compare_to}}.\",\n        lessThanOrEqualTo: \"{{name}} must be less than or equal to {{compare_to}}.\",\n        odd: \"{{name}} must be an odd number.\",\n        even: \"{{name}} must be an even number.\"\n      },\n      format: {\n        pattern: \"{{name}} is not formatted correctly.\"\n      }\n    }\n\n*{{name}}* gets replaced with the name of the property in error, and\n*{{compare\\_to}}* gets replaced with the value that the object property was\ncompared to, if relevant.\n\nAny of these messages can be overridden by specifying a message option on the\nproperty configuration like so:\n\n    var errors = validations.validate(my_object, {\n      properties: {\n        my_prop: {\n          required: true,\n          message: \"Where the hell is {{name}}?\"\n        }\n      }\n    });\n\nIf you would like to override the message for a particular option for all\nproperties in a configuration, you can pass a *defaultMessages* configuration\nlike so:\n\n    var errors = validations.validate(my_object, {\n      defaultMessages: {\n        length: {\n          is: \"{{name}} must be {{compare_to}} characters in length, no more, no less.\"\n        }\n      },\n      properties: {\n        my_prop_a: {\n          length: {\n            is: 1\n          }\n        },\n        my_prop_b: {\n          length: {\n            is: 2\n          }\n        }\n      }\n    });\n\n### Errors object\n\nThe errors object returned by the *validate* function acts like the ActiveRecord\nValidations errors objects.\n\nHere are the methods available:\n\n* count() - returns the total number of errors found.  alias for *size()*.\n\n* each(callback) - iterates through all the properties for which an error was\n  found, passing errors and name of property to *callback*.  e.g.:\n  <pre>\n  errors\\_result.each(function(errors, name) {\n    util.puts(\"Errors on \" + name + \":\" + errors.join(\" \"));\n  })\n  </pre>\n  *errors* is an normally an array of error messages.  When using recursion,\n  *errors* may be a child errors object on which all of these methods can be\n  called.\n\n* isEmpty() - return true if there no errors.\n\n* messages() - returns all error messages in an array.\n\n* isInvalid(name) - returns true if an error was found with *name*.\n\n* length() - returns the total number of errors found.  alias for *size()*.\n\n* on(name) - returns all of the error messages for *name* as an array.\n\n* size() - returns the total number of errors found.\n\n### Recursion\n\nvalidations-js can validate recursively. A property of an object can be an object\nthat has its own configuration. Use the *object* option to specify a\nsub-configuration for an object property. For example, let's say you had an\nobject representing a place, with a *location* property that is itself an object\nwith a *lat* and *lon* property. You might validate it like so:\n\n    var errors = validations.validate(place, {\n      properties: {\n        name: {\n          required: true,\n          length: {min: 1, max: 80}\n        },\n        location: {\n          object: {\n            properties: {\n              lat: {\n                required: true,\n                numericality: {greaterThanOrEqualTo: -90, lessThanOrEqualTo: 90}\n              },\n              lon: {\n                required: true,\n                numericality: {greaterThanOrEqualTo: -180, lessThanOrEqualTo: 180}\n              }\n            }\n          }\n        }\n      }\n    })\n\nThe errors object returned by *validate* is also recursive. You would detect and\ndisplay an error with the *lat* property like so:\n\n    if (!isBlank(errors)\n        && errors.isInvalid(\"location\")\n        && errors.on(\"location\").isInvalid(\"lat\"))\n      util.puts(\"Problem with lat: \" + errors.on(\"location\").on(\"lat\").join(\" \"));\n\n## License\n\nCopyright (c) 2010 Daniel Kim\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE.\n",
  "_id": "validations@0.1.2",
  "_from": "validations"
}
